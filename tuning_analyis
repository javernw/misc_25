# Re-import necessary libraries after environment reset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Simulate a DataFrame with multiple numeric columns
np.random.seed(42)
df = pd.DataFrame({
    'value1': np.random.normal(10, 2, 1000),
    'value2': np.random.normal(20, 5, 1000),
    'value3': np.random.normal(50, 10, 1000)
})

# Define desired percentiles
percentile_range = np.arange(0, 101, 5)

# Compute percentiles for each numeric column
percentile_records = []
for col in df.select_dtypes(include=[np.number]).columns:
    pct_values = np.percentile(df[col], percentile_range)
    for p, v in zip(percentile_range, pct_values):
        percentile_records.append({
            'column': col,
            'percentile': p,
            'value': v,
            'is_threshold': p in [90, 95]
        })

# Convert to DataFrame
percentile_df = pd.DataFrame(percentile_records)

# Visualize percentiles and thresholds
plt.figure(figsize=(12, 6))
sns.lineplot(data=percentile_df, x='percentile', y='value', hue='column', marker='o')

# Annotate threshold points
threshold_points = percentile_df[percentile_df['is_threshold']]
for _, row in threshold_points.iterrows():
    plt.text(row['percentile'], row['value'], f"{row['column']} ({row['percentile']}%)", 
             fontsize=8, ha='right', va='bottom')

plt.title("Percentile Curves with Threshold Flags (90th and 95th)")
plt.xlabel("Percentile")
plt.ylabel("Value")
plt.grid(True)
plt.legend(title="Column")
plt.tight_layout()
plt.show()

import ace_tools as tools; tools.display_dataframe_to_user(by name="Percentile Analysis with Thresholds", dataframe=percentile_df)



from pyspark.sql.functions import col

def change_data_type(df, cols, d_type):
    for c in cols:
        df = df.withColumn(c, col(c).cast(d_type))
    return df

# Cleaned list of column names
numerical_columns = [
    'HighRisk_NonHome_Currency_Trade_Value',
    'HighRisk_NonHome_Currency_Trade_Volume',
    'Restricted_Currency_Trade_Value',
    'Restricted_Currency_Trade_Volume'
]

# Apply the function to each month's DataFrame
tuning_aug = change_data_type(tuning_aug, numerical_columns, "float")
tuning_sept = change_data_type(tuning_sept, numerical_columns, "float")
tuning_oct = change_data_type(tuning_oct, numerical_columns, "float")



import matplotlib.pyplot as plt

# Get unique column names
columns = percentile_df['column'].unique()

# Set up the plot
plt.figure(figsize=(12, 6))

# Plot each column's curve
for col in columns:
    subset = percentile_df[percentile_df['column'] == col]
    plt.plot(subset['percentile'], subset['value'], marker='o', label=col)

# Highlight threshold percentiles (90th and 95th)
for col in columns:
    for p in [90, 95]:
        val = percentile_df[(percentile_df['column'] == col) & (percentile_df['percentile'] == p)]['value'].values
        if val.size > 0:
            plt.axvline(x=p, color='grey', linestyle='--', linewidth=0.5)
            plt.text(p, val[0], f"{col} {p}%", fontsize=8, va='bottom', ha='right')

# Final touches
plt.title("Percentile Curves for Multiple Columns")
plt.xlabel("Percentile")
plt.ylabel("Value")
plt.legend(title="Column")
plt.grid(True)
plt.tight_layout()
plt.show()
