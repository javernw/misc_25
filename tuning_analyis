# Re-import necessary libraries after environment reset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Simulate a DataFrame with multiple numeric columns
np.random.seed(42)
df = pd.DataFrame({
    'value1': np.random.normal(10, 2, 1000),
    'value2': np.random.normal(20, 5, 1000),
    'value3': np.random.normal(50, 10, 1000)
})

# Define desired percentiles
percentile_range = np.arange(0, 101, 5)

# Compute percentiles for each numeric column
percentile_records = []
for col in df.select_dtypes(include=[np.number]).columns:
    pct_values = np.percentile(df[col], percentile_range)
    for p, v in zip(percentile_range, pct_values):
        percentile_records.append({
            'column': col,
            'percentile': p,
            'value': v,
            'is_threshold': p in [90, 95]
        })

# Convert to DataFrame
percentile_df = pd.DataFrame(percentile_records)

# Visualize percentiles and thresholds
plt.figure(figsize=(12, 6))
sns.lineplot(data=percentile_df, x='percentile', y='value', hue='column', marker='o')

# Annotate threshold points
threshold_points = percentile_df[percentile_df['is_threshold']]
for _, row in threshold_points.iterrows():
    plt.text(row['percentile'], row['value'], f"{row['column']} ({row['percentile']}%)", 
             fontsize=8, ha='right', va='bottom')

plt.title("Percentile Curves with Threshold Flags (90th and 95th)")
plt.xlabel("Percentile")
plt.ylabel("Value")
plt.grid(True)
plt.legend(title="Column")
plt.tight_layout()
plt.show()

import ace_tools as tools; tools.display_dataframe_to_user(by name="Percentile Analysis with Thresholds", dataframe=percentile_df)



from pyspark.sql.functions import col

def change_data_type(df, cols, d_type):
    for c in cols:
        df = df.withColumn(c, col(c).cast(d_type))
    return df

# Cleaned list of column names
numerical_columns = [
    'HighRisk_NonHome_Currency_Trade_Value',
    'HighRisk_NonHome_Currency_Trade_Volume',
    'Restricted_Currency_Trade_Value',
    'Restricted_Currency_Trade_Volume'
]

# Apply the function to each month's DataFrame
tuning_aug = change_data_type(tuning_aug, numerical_columns, "float")
tuning_sept = change_data_type(tuning_sept, numerical_columns, "float")
tuning_oct = change_data_type(tuning_oct, numerical_columns, "float")



import matplotlib.pyplot as plt

# Get unique column names
columns = percentile_df['column'].unique()

# Set up the plot
plt.figure(figsize=(12, 6))

# Plot each column's curve
for col in columns:
    subset = percentile_df[percentile_df['column'] == col]
    plt.plot(subset['percentile'], subset['value'], marker='o', label=col)

# Highlight threshold percentiles (90th and 95th)
for col in columns:
    for p in [90, 95]:
        val = percentile_df[(percentile_df['column'] == col) & (percentile_df['percentile'] == p)]['value'].values
        if val.size > 0:
            plt.axvline(x=p, color='grey', linestyle='--', linewidth=0.5)
            plt.text(p, val[0], f"{col} {p}%", fontsize=8, va='bottom', ha='right')

# Final touches
plt.title("Percentile Curves for Multiple Columns")
plt.xlabel("Percentile")
plt.ylabel("Value")
plt.legend(title="Column")
plt.grid(True)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Copy the percentile DataFrame
plot_df = percentile_df.copy()

# Normalize values within each column
plot_df['normalized_value'] = plot_df.groupby('column')['value'].transform(
    lambda x: (x - x.min()) / (x.max() - x.min())
)

# Plot normalized curves
plt.figure(figsize=(12, 6))
for col in plot_df['column'].unique():
    subset = plot_df[plot_df['column'] == col]
    plt.plot(subset['percentile'], subset['normalized_value'], label=col, marker='o')

plt.title("Normalized Percentile Curves")
plt.xlabel("Percentile")
plt.ylabel("Normalized Value (0 to 1)")
plt.legend(title="Column")
plt.grid(True)
plt.tight_layout()
plt.show()

# Create 2x2 subplots: Raw and Normalized for Value and Volume
fig, axes = plt.subplots(2, 2, figsize=(16, 10), sharex=True)

# Raw Trade Value (Top Left)
for col in value_cols:
    subset = percentile_df[percentile_df['column'] == col]
    axes[0, 0].plot(subset['percentile'], subset['value'], label=col, marker='o')
    for p in [90, 95]:
        val = subset[subset['percentile'] == p]['value'].values
        if val.size > 0:
            axes[0, 0].axvline(p, color='gray', linestyle='--', linewidth=0.5)
            axes[0, 0].text(p, val[0], f"{col} ({p}%)", fontsize=8, ha='right', va='bottom')

# Raw Trade Volume (Top Right)
for col in volume_cols:
    subset = percentile_df[percentile_df['column'] == col]
    axes[0, 1].plot(subset['percentile'], subset['value'], label=col, marker='o')
    for p in [90, 95]:
        val = subset[subset['percentile'] == p]['value'].values
        if val.size > 0:
            axes[0, 1].axvline(p, color='gray', linestyle='--', linewidth=0.5)
            axes[0, 1].text(p, val[0], f"{col} ({p}%)", fontsize=8, ha='right', va='bottom')

# Normalized Trade Value (Bottom Left)
for col in value_cols:
    subset = percentile_df[percentile_df['column'] == col]
    axes[1, 0].plot(subset['percentile'], subset['normalized_value'], label=col, marker='o')
    for p in [90, 95]:
        val = subset[subset['percentile'] == p]['normalized_value'].values
        if val.size > 0:
            axes[1, 0].axvline(p, color='gray', linestyle='--', linewidth=0.5)
            axes[1, 0].text(p, val[0], f"{col} ({p}%)", fontsize=8, ha='right', va='bottom')

# Normalized Trade Volume (Bottom Right)
for col in volume_cols:
    subset = percentile_df[percentile_df['column'] == col]
    axes[1, 1].plot(subset['percentile'], subset['normalized_value'], label=col, marker='o')
    for p in [90, 95]:
        val = subset[subset['percentile'] == p]['normalized_value'].values
        if val.size > 0:
            axes[1, 1].axvline(p, color='gray', linestyle='--', linewidth=0.5)
            axes[1, 1].text(p, val[0], f"{col} ({p}%)", fontsize=8, ha='right', va='bottom')

# Titles and formatting
axes[0, 0].set_title("Raw Percentiles: Trade Value")
axes[0, 1].set_title("Raw Percentiles: Trade Volume")
axes[1, 0].set_title("Normalized Percentiles: Trade Value")
axes[1, 1].set_title("Normalized Percentiles: Trade Volume")

for i in range(2):
    for j in range(2):
        axes[i, j].set_xlabel("Percentile")
        axes[i, j].grid(True)
        axes[i, j].legend()

axes[0, 0].set_ylabel("Raw Value")
axes[1, 0].set_ylabel("Normalized Value (0â€“1)")

plt.tight_layout()
plt.show()



import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Simulate the dataset
np.random.seed(42)
df = pd.DataFrame({
    'HighRisk_Trade_Value': np.random.normal(100000, 20000, 1000),
    'HighRisk_Trade_Volume': np.random.normal(50, 10, 1000),
    'Restricted_Trade_Value': np.random.normal(80000, 15000, 1000),
    'Restricted_Trade_Volume': np.random.normal(40, 8, 1000)
})

# Compute percentiles
percentile_range = np.arange(0, 101, 5)
records = []
for col in df.columns:
    pct_values = np.percentile(df[col], percentile_range)
    for p, v in zip(percentile_range, pct_values):
        records.append({'column': col, 'percentile': p, 'value': v})

percentile_df = pd.DataFrame(records)
percentile_df['normalized_value'] = percentile_df.groupby('column')['value'].transform(
    lambda x: (x - x.min()) / (x.max() - x.min())
)

# Identify value vs volume columns
value_cols = [col for col in df.columns if 'Value' in col]
volume_cols = [col for col in df.columns if 'Volume' in col]

# Create subplot layout
fig = make_subplots(rows=2, cols=2, subplot_titles=[
    "Raw Percentiles: Trade Value", "Raw Percentiles: Trade Volume",
    "Normalized Percentiles: Trade Value", "Normalized Percentiles: Trade Volume"
])

# Plot raw values (top row)
for col in value_cols:
    data = percentile_df[percentile_df['column'] == col]
    fig.add_trace(go.Scatter(x=data['percentile'], y=data['value'], name=col,
                             mode='lines+markers'), row=1, col=1)

for col in volume_cols:
    data = percentile_df[percentile_df['column'] == col]
    fig.add_trace(go.Scatter(x=data['percentile'], y=data['value'], name=col,
                             mode='lines+markers'), row=1, col=2)

# Plot normalized values (bottom row)
for col in value_cols:
    data = percentile_df[percentile_df['column'] == col]
    fig.add_trace(go.Scatter(x=data['percentile'], y=data['normalized_value'], name=col,
                             mode='lines+markers', showlegend=False), row=2, col=1)

for col in volume_cols:
    data = percentile_df[percentile_df['column'] == col]
    fig.add_trace(go.Scatter(x=data['percentile'], y=data['normalized_value'], name=col,
                             mode='lines+markers', showlegend=False), row=2, col=2)

# Layout adjustments
fig.update_layout(height=800, width=1000, title_text="Interactive Percentile Analysis (Plotly)",
                  showlegend=True)

fig.update_xaxes(title_text="Percentile", row=1, col=1)
fig.update_xaxes(title_text="Percentile", row=1, col=2)
fig.update_xaxes(title_text="Percentile", row=2, col=1)
fig.update_xaxes(title_text="Percentile", row=2, col=2)

fig.update_yaxes(title_text="Raw Value", row=1, col=1)
fig.update_yaxes(title_text="Raw Value", row=1, col=2)
fig.update_yaxes(title_text="Normalized Value", row=2, col=1)
fig.update_yaxes(title_text="Normalized Value", row=2, col=2)

fig.show()
