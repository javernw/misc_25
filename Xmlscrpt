# Updated XML Sample with Multiple Entries
xml_strings = [
    """<form>
        <metadata></metadata>
        <field name="apples" type="string"><value>Apples are great</value></field>
        <field name="oranges" type="string"><value>I love oranges</value></field>
        <field name="bananas" type="string"><value>Bananas are tasty</value></field>
    </form>""",
    
    """<form>
        <metadata></metadata>
        <field name="apples" type="string"><value>Green apples are sour</value></field>
        <field name="oranges" type="string"><value>Oranges are juicy</value></field>
        <field name="bananas" type="string"><value>Bananas are rich in potassium</value></field>
    </form>"""
]

# Function to Extract All Fields and Values for Each XML String and Transpose
def extract_and_transpose_multiple(xml_list):
    extracted_data_list = []

    for xml_string in xml_list:
        try:
            root = ET.fromstring(xml_string)
            extracted_data = {}

            # Loop through all <field> elements
            for field in root.findall("field"):
                field_name = field.get("name")  # Get field name attribute
                value_element = field.find("value")  # Find <value> tag
                field_value = value_element.text if value_element is not None else None

                # Store extracted data in dictionary format
                extracted_data[field_name] = field_value

            # Append to list as a row of data
            extracted_data_list.append(extracted_data)

        except ET.ParseError:
            print("Error: Invalid XML format")

    # Convert list of dictionaries to DataFrame (each XML entry as a row)
    df = pd.DataFrame(extracted_data_list)
    return df

# Extract Data from Multiple XML Strings and Create Transposed Table
df_transposed_multiple = extract_and_transpose_multiple(xml_strings)

# Display the Transposed DataFrame as a Table
tools.display_dataframe_to_user(name="Transposed XML Fields for Multiple Entries", dataframe=df_transposed_multiple)



import pandas as pd
import xml.etree.ElementTree as ET
import ace_tools as tools  # For displaying table

# Sample XML Data (Replace this with actual XML input)
xml_string = """<form>
    <metadata></metadata>
    <field name="apples" type="string"><value>Apples are great</value></field>
    <field name="oranges" type="string"><value>I love oranges</value></field>
    <field name="bananas" type="string"><value>Bananas are tasty</value></field>
</form>"""

# Function to Extract All Fields and Values and Transpose
def extract_and_transpose(xml_string):
    try:
        root = ET.fromstring(xml_string)
        extracted_data = {}

        # Loop through all <field> elements
        for field in root.findall("field"):
            field_name = field.get("name")  # Get field name attribute
            value_element = field.find("value")  # Find <value> tag
            field_value = value_element.text if value_element is not None else None

            # Store extracted data in dictionary format
            extracted_data[field_name] = field_value

        # Convert to DataFrame and Transpose
        df = pd.DataFrame([extracted_data])
        return df

    except ET.ParseError:
        print("Error: Invalid XML format")
        return pd.DataFrame()  # Return empty DataFrame on error

# Extract Data and Create Transposed Table
df_transposed = extract_and_transpose(xml_string)

# Display the Transposed DataFrame as a Table
tools.display_dataframe_to_user(name="Transposed XML Fields", dataframe=df_transposed)


import matplotlib.pyplot as plt

# Creating the slide layout
fig, ax = plt.subplots(figsize=(12, 6))
ax.set_xlim(0, 12)
ax.set_ylim(0, 10)
ax.axis("off")

# Title
ax.text(6, 9.5, "Risk Indicator Library: Standardizing Risk Coverage", fontsize=14, fontweight="bold", ha="center")

# Key formula flow (Visual Hierarchy)
ax.text(2, 7.5, "Pattern of Behavior", fontsize=12, fontweight="bold", ha="center", bbox=dict(facecolor='lightblue', edgecolor='black', boxstyle='round,pad=0.5'))
ax.text(6, 7.5, "Enabler", fontsize=12, fontweight="bold", ha="center", bbox=dict(facecolor='lightblue', edgecolor='black', boxstyle='round,pad=0.5'))
ax.text(10, 7.5, "Risk Factor", fontsize=12, fontweight="bold", ha="center", bbox=dict(facecolor='lightblue', edgecolor='black', boxstyle='round,pad=0.5'))

# Multiplication symbols
ax.text(4, 7.5, "×", fontsize=14, fontweight="bold", ha="center")
ax.text(8, 7.5, "×", fontsize=14, fontweight="bold", ha="center")

# Equals sign and Features Box
ax.text(11, 7.5, "=", fontsize=14, fontweight="bold", ha="center")
ax.text(11.5, 7.5, "Features", fontsize=12, fontweight="bold", ha="center", bbox=dict(facecolor='blue', edgecolor='black', boxstyle='round,pad=0.5', alpha=0.5))

# Adding examples under each category
ax.text(2, 6.5, "- Excessive usage vs peers\n- Unusual past usage\n- Rapid movement", fontsize=10, ha="center")
ax.text(6, 6.5, "- Cash\n- Wire Transfers\n- Crypto", fontsize=10, ha="center")
ax.text(10, 6.5, "- High-risk jurisdictions\n- High-risk industries\n- PEP flag", fontsize=10, ha="center")

# Key Considerations Section
ax.text(6, 4.5, "Key Considerations", fontsize=12, fontweight="bold", ha="center")
ax.text(6, 3.8, "✔ Ensure enablers align with product families & payment rails\n"
                 "✔ Indicators align with MLRO, TMRA, FinCrime insights\n"
                 "✔ Consider alternative risk coverage methods for explainability", fontsize=10, ha="center")

# Footer
ax.text(6, 1, "Draft for Discussion | Work in Progress", fontsize=10, color='red', ha="center")

# Display the redesigned slide
plt.show()
